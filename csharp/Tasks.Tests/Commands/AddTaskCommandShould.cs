using System;
using FluentAssertions;
using NUnit.Framework;
using Tasks.Actions;
using Tasks.Model;

namespace Tasks.Commands
{
    [TestFixture]
    public sealed class AddTaskCommandShould
    {
        private readonly Func<long> _nextId = () => 123;

        [Test]
        public void CreateATaskCommandWithIdFromACommandLine()
        {
            const string commandLine = "add task secrets 'a123' Eat more donuts";

            var addTaskCommand = new AddTaskCommand(commandLine, _nextId);

            addTaskCommand.TaskId.Should().Be(new Id("a123"));
            addTaskCommand.ProjectName.Should().Be("secrets");
            addTaskCommand.TaskDescription.Should().Be("Eat more donuts");
        }

        [Test]
        public void CreateATaskCommandWithAutogeneratedIdFromACommandLine()
        {
            const string commandLine = 
                "add task secrets Coupling and Cohesion";

            var addTaskCommand = new AddTaskCommand(commandLine, _nextId);

            addTaskCommand.TaskId.Should().Be(new Id(123));
            addTaskCommand.ProjectName.Should().Be("secrets");
            addTaskCommand.TaskDescription.Should().Be("Coupling and Cohesion");
        }

        [Test]
        public void CreateATaskCommandWithSingleWordDescription()
        {
            const string commandLine =
                "add task secrets SOLID";

            var addTaskCommand = new AddTaskCommand(commandLine, _nextId);

            addTaskCommand.TaskId.Should().Be(new Id(123));
            addTaskCommand.ProjectName.Should().Be("secrets");
            addTaskCommand.TaskDescription.Should().Be("SOLID");
        }
    }
}